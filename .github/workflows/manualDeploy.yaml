name: manual deploy

on:
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Select and environment'
        required: true
        default: 'warning'
        type: choice
        options:
          - aks-beta-fint-2021-11-23
          - aks-api-fint-2022-02-08
      org:
        description: 'Select organisation'
        required: true
        default: 'warning'
        type: choice
        options:
          - fintlabs-no
          - ofk-no
          - bfk-no
          - afk-no

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CLUSTER_NAME: ${{ inputs.cluster }}
  ORG: ${{ inputs.org }}

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node_modules
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - uses: actions/setup-node@v4
        if: steps.node_modules.outputs.cache-hit != 'true'
        with:
          node-version: "20.x"
          cache: "npm"

      - run: npm ci --ignore-scripts
        if: steps.node_modules.outputs.cache-hit != 'true'

  cypress-run:
    needs: install
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cypress run
        uses: cypress-io/github-action@v6
        env:
          CYPRESS_TESTS: true
        with:
          build: npm run build
          start: npm start
          browser: chrome

  build:
    needs: [ install, cypress-run ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - run: BASE_PATH=${{ matrix.path }} npm run build

      # Bygg docker image
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.org }}-${{ matrix.environment }}
          tags: |
            type=sha,enable=true,priority=100,prefix=sha-,suffix=,format=short
            type=raw,value=latest,enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Cache static files
        uses: actions/cache@v4
        with:
          path: |
            ./build
          key: ${{ github.sha }}

  deploy-to-aks:
    name: deploy for ${{ matrix.org }} to ${{ matrix.cluster }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - org: fintlabs-no
            cluster: aks-beta-fint-2021-11-23
    #          - org: bfk-no
    #            cluster: aks-api-fint-2022-02-08
    #          - org: afk-no
    #            cluster: aks-api-fint-2022-02-08
    #          - org: ofk-no
    #            cluster: aks-api-fint-2022-02-08

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get environment
        uses: actions/github-script@v6
        id: environment
        with:
          script: return '${{ matrix.cluster }}'.split('-')[1]
          result-encoding: string

      - name: Get resource group name
        uses: actions/github-script@v6
        id: resource-group
        with:
          script: return 'rg-aks-${{ steps.environment.outputs.result }}'
          result-encoding: string

      - name: Bake manifests with Kustomize
        id: bake
        uses: azure/k8s-bake@v2.4
        with:
          renderEngine: 'kustomize'
          kustomizationPath: 'kustomize/overlays/${{ steps.environment.outputs.result }}/${{ matrix.org }}'

      - uses: azure/login@v1
        with:
          creds: "${{ secrets[format('AKS_{0}_FINT_GITHUB', steps.environment.outputs.result)] }}"

      - uses: azure/use-kubelogin@v1.1
        with:
          kubelogin-version: 'v0.0.26'

      - name: Set the target cluster
        uses: azure/aks-set-context@v3
        with:
          cluster-name: '${{ matrix.cluster }}'
          resource-group: '${{ steps.resource-group.outputs.result }}'
          admin: 'true'
          use-kubelogin: 'true'

      - name: Deploy
        uses: azure/k8s-deploy@v4.9
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: ${{ needs.build.outputs.tags }}
          namespace: ${{ matrix.org }}

#    steps:
#      - uses: actions/github-script@v7
#        name: Get resource group name
#        id: rg
#        with:
#          script: |
#            const a = '${{ inputs.cluster }}'.split('-')
#            return `rg-${a[0]}-${a[1]}`
#          result-encoding: string
#
#      - uses: actions/github-script@v7
#        name: Get environment
#        id: environment
#        with:
#          script: |
#            const a = '${{ inputs.cluster }}'.split('-')
#            return `${a[1]}`
#          result-encoding: string
#      - uses: actions/github-script@v7
#        name: Get auth
#        id: auth
#        with:
#          script: |
#            const e = '${{ steps.environment.outputs.result }}'.toUpperCase()
#            return `secrets.AKS_${e}_FINT_GITHUB`
#          result-encoding: string
#
#      - run: |
#          echo "Cluster: $CLUSTER_NAME"
#          echo "Resource group: ${{ steps.rg.outputs.result }}"
#          echo "Environment: ${{ steps.environment.outputs.result }}"
#          echo "OrgId: $ORG"
#      - name: Checkout repository
#        uses: actions/checkout@v4.1.7
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v3.3.0
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v5.5.1
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#          tags: |
#            type=sha,enable=true,priority=100,prefix=sha-,suffix=,format=short
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#
#      - name: Bake manifests with Kustomize
#        uses: azure/k8s-bake@v3
#        with:
#          renderEngine: 'kustomize'
#          kustomizationPath: 'kustomize/overlays/${{ steps.environment.outputs.result }}/${{ env.ORG}}'
#        id: bake
#
#      - uses: azure/login@v2
#        with:
#          creds: "${{ secrets[format('AKS_{0}_FINT_GITHUB', steps.environment.outputs.result)] }}"
#
#      - uses: azure/use-kubelogin@v1.2
#        with:
#          kubelogin-version: 'v0.0.32'
#
#      - name: Set the target cluster
#        uses: azure/aks-set-context@v4
#        with:
#          cluster-name: ${{ env.CLUSTER_NAME }}
#          resource-group: ${{ steps.rg.outputs.result }}
#          admin: 'true'
#          use-kubelogin: 'true'
#
#      - name: Deploy to ${{ env.CLUSTER_NAME }}
#        uses: azure/k8s-deploy@v5
#        with:
#          manifests: ${{ steps.bake.outputs.manifestsBundle }}
#          images: |
#            ${{ steps.meta.outputs.tags }}
#          namespace: ${{ env.ORG }}
#          action: deploy
